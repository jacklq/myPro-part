##定义初始变量
#set($tableName = $tool.append($tableInfo.name, "ServiceImpl"))
##设置回调
$!callback.setFileName($tool.append($tableName, ".java"))
$!callback.setSavePath($tool.append($tableInfo.savePath, "/service/impl"))

##拿到主键
#if(!$tableInfo.pkColumn.isEmpty())
    #set($pk = $tableInfo.pkColumn.get(0))
#end

#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;

import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};
import $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;
import $!{tableInfo.savePackageName}.service.I$!{tableInfo.name}Service;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;

/**
 * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类
 *
 * @author jack
 * @since $!time.currTime()
 */
@Service("$!tool.firstLowerCase($!{tableInfo.name})Service")
@Transactional(rollbackFor = Exception.class)/*发生异常则回滚*/
public class $!{tableName} implements I$!{tableInfo.name}Service {
    @Autowired
    private $!{tableInfo.name}Dao $!tool.firstLowerCase($!{tableInfo.name})Dao;


/** ******增删改查**************************/

     /**
     * 新增数据
     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象
     * @return 影响行数
     */
  
    public Integer insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {
       return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.insert($!tool.firstLowerCase($!{tableInfo.name}));
    }
    
    /**
     * 通过主键删除数据
     * @param $!pk.name 主键
     * @return 影响行数
     */
 
    public Integer deleteById($!pk.shortType $!pk.name) {
        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteById($!pk.name);
    }
     /**
     * 修改数据
     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象
     * @return 影响行数
     */
 
    public Integer update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {
        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.update($!tool.firstLowerCase($!{tableInfo.name}));       
    }
     /**
     * 通过ID查询单条数据
     * @param $!pk.name 主键
     * @return 实例对象
     */
 
    public $!{tableInfo.name} queryById($!pk.shortType $!pk.name) {
        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryById($!pk.name);
    }

/** ******批量操作**************************/
     /**
     * 插入多条数据
     * @param idList id列表
     * @return 影响行数
     */
	public Integer insertBatch(List<$!{tableInfo.name}> $!tool.firstLowerCase($!{tableInfo.name})List){
	    return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.insertBatch($!tool.firstLowerCase($!{tableInfo.name})List);

	}
	
	/**
     * 删除多条数据
     * @param idList id列表
     * @return 影响行数
     */
	public Integer deleteBatchByIds(List idList){
		return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteBatchByIds(idList);
	}
	
	/**
     * 更新多条数据（Foreach方式）
     * @param studentList student列表
     * @return 影响行数
     */
	public  Integer updateBatchForeach(List<$!{tableInfo.name}>  $!tool.firstLowerCase($!{tableInfo.name})List){
		return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.updateBatchForeach($!tool.firstLowerCase($!{tableInfo.name})List);

	}
 
	/**
     * 更新多条数据（CaseWhen方式）
     * @param studentList student列表
     * @return 影响行数
     */
    public  Integer updateBatchCaseWhen(List<$!{tableInfo.name}>  $!tool.firstLowerCase($!{tableInfo.name})List){
		return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.updateBatchCaseWhen($!tool.firstLowerCase($!{tableInfo.name})List);
	}
	
	/**
     * 查询多条数据
     * @param idList id列表
     * @return 对象列表
     */
    public List<$!{tableInfo.name}> queryBatchByIds(List idList){
		return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryBatchByIds(idList);
	
	}


/** ******其他操作**************************/

   
    /**
     * 查询多条数据
     * @param offset 查询起始位置
     * @param limit 查询条数
     * @return 对象列表
     */
   
    public List<$!{tableInfo.name}> queryAllByLimit(int offset, int limit) {
        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryAllByLimit(offset, limit);
    }

  

   

    
}